---
import Layout from "../../../../layouts/Layout.astro";
import "../../../../styles/product-page.scss";
import fs from "fs";
import path from "path";
import { LOCALES, getIndexes } from '../../../../config/locales.js';

export async function getStaticPaths() {
  const locales = LOCALES;
  const indexes = getIndexes();

  const paths: { params: { country: string; language: string; product: string } }[] = [];

  // Create a directory for storing product data
  const dataDir = path.join(process.cwd(), "src", "data", "products");
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }

  // Make all API calls in parallel
  console.log("Starting parallel API calls for all locales...");
  const apiPromises = locales.map(async ({ country, language }) => {
    const index = indexes[country as keyof typeof indexes];
    console.log(`Fetching products for ${country}-${language}...`);
    
    const response = await fetch(
      `${import.meta.env.PUBLIC_MEILISEARCH_URL}/indexes/${index}/search`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${import.meta.env.PUBLIC_MEILISEARCH_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ q: "", limit: 100000 }),
      },
    );

    const data = await response.json();
    console.log(`Received ${data.hits.length} products for ${country}-${language}`);
    
    return { country, language, hits: data.hits };
  });

  // Wait for all API calls to complete
  const apiResults = await Promise.all(apiPromises);
  console.log("All API calls completed, processing results...");

  // Process results and write files in parallel
  const fileWritePromises = apiResults.map(async ({ country, language, hits }) => {
    const productsData: Record<string, any> = {};
    const localPaths: { params: { country: string; language: string; product: string } }[] = [];

    // Process hits for this locale
    hits.forEach((hit: any) => {
      productsData[hit.slug] = hit;
      localPaths.push({
        params: {
          country,
          language,
          product: hit.slug,
        },
      });
    });

    // Write the products data to a JSON file
    const filePath = path.join(dataDir, `${country}-${language}.json`);
    await fs.promises.writeFile(filePath, JSON.stringify(productsData, null, 2));
    console.log(`Saved ${Object.keys(productsData).length} products for ${country}-${language} to ${filePath}`);
    
    return localPaths;
  });

  // Wait for all file writes to complete and collect paths
  const pathArrays = await Promise.all(fileWritePromises);
  
  // Flatten all paths into a single array
  pathArrays.forEach(localPaths => {
    paths.push(...localPaths);
  });

  console.log(`Total paths generated: ${paths.length}`);
  return paths;
}

const { country, language, product } = Astro.params;

// Read product data from the saved JSON file instead of making an API call
const dataDir = path.join(process.cwd(), "src", "data", "products");
const filePath = path.join(dataDir, `${country}-${language}.json`);

let p: any;
try {
  const productsData = JSON.parse(fs.readFileSync(filePath, "utf-8"));
  p = productsData[product!];
  
  if (!p) {
    throw new Error(`Product ${product} not found in ${country}-${language} data`);
  }
} catch (error) {
  console.error(`Error reading product data for ${product} in ${country}-${language}:`, error);
  // Fallback to API call if JSON file is not available (shouldn't happen in production)
  const indexes = getIndexes();

  const response = await fetch(
    `${import.meta.env.PUBLIC_MEILISEARCH_URL}/indexes/${indexes[country as keyof typeof indexes]}/search`,
    {
      method: "POST",
      headers: {
        Authorization: `Bearer ${import.meta.env.PUBLIC_MEILISEARCH_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ q: product }),
    },
  );
  const { hits } = await response.json();
  p = hits[0];
}

// Prepare fallback image
const firstVariation = p.variations?.[0];
const firstImage =
  firstVariation?.product_images?.[0]?.filename ?? "no-img-transparent.png";

// Flags for table columns
let haveWidth = false;
let haveHeight = false;
let haveLength = false;
let haveWeight = false;
let haveVendReady = false;

p.variations?.forEach((v: any) => {
  if (v.unit_width > 0) haveWidth = true;
  if (v.unit_height > 0) haveHeight = true;
  if (v.unit_length > 0) haveLength = true;
  if (v.unit_weight > 0) haveWeight = true;
  if (v.vend_ready === "1") haveVendReady = true;
});
---

<Layout>
  <div class="product-page">
    <button class="back-button" onclick="window.history.back()">Back</button>

    <div class="product-container">
      <header class="product-header">
        <h1>{p.web_title}</h1>
        <p class="description">{p.long_description}</p>
        <p class="sku">SKU: {p.sku_id}</p>
      </header>

      <section class="product-section image-section">
        <h2>Images</h2>
        <img
          src={`https://res.cloudinary.com/globusgroup/image/upload/w_400,h_400,f_auto,c_pad/PIM/${firstImage}`}
          alt={p.product_name}
        />
      </section>

      <section class="product-section">
        <h2>Features</h2>
        <ul class="features-list">
          {
            p.bullet_points && Array.isArray(p.bullet_points)
              ? p.bullet_points?.map((bp: any) => <li>{bp}</li>)
              : ""
          }
        </ul>
      </section>

      <section class="product-section">
        <h2>Product Variations</h2>
        <ul class="variations-list">
          {p.variations?.map((v: any) => <li>{v.variation_name ?? v.sku_id}</li>)}
        </ul>
      </section>

      <section class="product-section">
        <h2>Available Options</h2>
        <table class="options-table">
          <thead>
            <tr>
              <th>Product Code</th>
              <th>Size</th>
              {haveVendReady && <th>Vending Machine Ready</th>}
              {haveWidth && <th>Width</th>}
              {haveLength && <th>Length</th>}
              {haveHeight && <th>Height</th>}
              {haveWeight && <th>Weight</th>}
            </tr>
          </thead>
          <tbody>
            {
              p.variations?.map((v: any) => (
                <tr>
                  <td>{v.sku_id}</td>
                  <td>{v.size ?? "-"}</td>
                  {haveVendReady && <td>{v.vend_ready === "1" ? "✓" : "✗"}</td>}
                  {haveWidth && (
                    <td>
                      {v.unit_width ?? "-"}
                      {v.unit_size_unit_of_measure ?? ""}
                    </td>
                  )}
                  {haveLength && (
                    <td>
                      {v.unit_length ?? "-"}
                      {v.unit_size_unit_of_measure ?? ""}
                    </td>
                  )}
                  {haveHeight && (
                    <td>
                      {v.unit_height ?? "-"}
                      {v.unit_size_unit_of_measure ?? ""}
                    </td>
                  )}
                  {haveWeight && (
                    <td>
                      {v.unit_weight ?? "-"}
                      {v.unit_weight_unit_of_measure ?? ""}
                    </td>
                  )}
                </tr>
              ))
            }
          </tbody>
        </table>
      </section>

      <section class="product-section">
        <h2>Product Specifics</h2>
        <ul class="details-list">
          {
            p.sku_id && (
              <li>
                <strong>Master SKU:</strong> {p.sku_id}
              </li>
            )
          }
          {
            p.liner && (
              <li>
                <strong>Liner:</strong>{" "}
                {Array.isArray(p.liner) ? p.liner.join(", ") : p.liner}
              </li>
            )
          }
          {
            p.coating && (
              <li>
                <strong>Coating:</strong>{" "}
                {Array.isArray(p.coating) ? p.coating.join(", ") : p.coating}
              </li>
            )
          }
          {
            p.coating_type && (
              <li>
                <strong>Coating Type:</strong> {p.coating_type}
              </li>
            )
          }
          {
            p.construction_type && (
              <li>
                <strong>Construction Type:</strong> {p.construction_type}
              </li>
            )
          }
          {
            p.back_material && (
              <li>
                <strong>Back Material:</strong>{" "}
                {Array.isArray(p.back_material)
                  ? p.back_material.join(", ")
                  : p.back_material}
              </li>
            )
          }
          {
            p.palm_material && (
              <li>
                <strong>Palm Material:</strong>{" "}
                {Array.isArray(p.palm_material)
                  ? p.palm_material.join(", ")
                  : p.palm_material}
              </li>
            )
          }
          {
            p.biodegradable === "1" && (
              <li>
                <strong>Biodegradable:</strong> <span class="checkmark">✓</span>
              </li>
            )
          }
          {
            p.touchscreen === "1" && (
              <li>
                <strong>Touchscreen:</strong> <span class="checkmark">✓</span>
              </li>
            )
          }
          {
            p.food_safe === "1" && (
              <li>
                <strong>Food Safe:</strong> <span class="checkmark">✓</span>
              </li>
            )
          }
          {
            p.series && (
              <li>
                <strong>Series:</strong> {p.series}
              </li>
            )
          }
          {
            p.gauge && (
              <li>
                <strong>Gauge:</strong> {p.gauge}
              </li>
            )
          }
          {
            p.cuff_style && (
              <li>
                <strong>Cuff Style:</strong> {p.cuff_style}
              </li>
            )
          }
        </ul>
      </section>

      <section class="product-section">
        <h2>Certifications</h2>
        <ul class="details-list">
          {p.ce === "1" && <li>CE: <span class="checkmark">✓</span></li>}
          {
            p.certificate_number && (
              <li>CE Certificate Number: {p.certificate_number}</li>
            )
          }
          {p.ppe_cat_level && <li>Cat Level: {p.ppe_cat_level}</li>}
          {p.ukca === "1" && <li>UKCA: <span class="checkmark">✓</span></li>}
          {
            p.certifications?.map?.((cert: any) => (
              <li>
                {cert.label}: {cert.passed === "1" ? <span class="checkmark">✓</span> : cert.value}
              </li>
            ))
          }
        </ul>
      </section>

      <section class="product-section">
        <h2>Options</h2>
        <select class="options-select">
          {
            p.variations?.map((v: any) => (
              <option value={v.sku_id}>
                {v.variation_name ?? `${v.primary_colour ?? ""} - ${v.size ?? ""}`}
              </option>
            ))
          }
        </select>
      </section>
    </div>

    <footer class="product-footer">
      <p>Slug: {product}</p>
    </footer>
  </div>
</Layout>
